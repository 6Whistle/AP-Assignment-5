


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ARMex, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 E59F010C        LDR              r0, =ReadAddress1
    5 00000004         
    6 00000004 E4901004        LDR              r1, [r0], #4
    7 00000008 E4902004        LDR              r2, [r0], #4
    8 0000000C         
    9 0000000C E1A03FA1        MOV              r3, r1, LSR #31 ;sign only
   10 00000010 E1A04FA2        MOV              r4, r2, LSR #31
   11 00000014         
   12 00000014 E1A05081        MOV              r5, r1, LSL #1 ;no sign bit
   13 00000018 E1A06082        MOV              r6, r2, LSL #1
   14 0000001C         
   15 0000001C E3550000        CMP              r5, #0      ;verify r1 is 0
   16 00000020 01A0A002        MOVEQ            r10, r2
   17 00000024 0A000033        BEQ              STORE       ;if r1 is 0, store 
                                                            r2
   18 00000028         
   19 00000028 E3560000        CMP              r6, #0      ;verify r2 is 0
   20 0000002C 01A0A001        MOVEQ            r10, r1
   21 00000030 0A000030        BEQ              STORE       ;if r2 is 0, store 
                                                            r1
   22 00000034         
   23 00000034 E1A05C25        MOV              r5, r5, LSR #24 ;exponent only
   24 00000038 E1A06C26        MOV              r6, r6, LSR #24
   25 0000003C         
   26 0000003C E35500FF        CMP              r5, #255    ;verify r1's expone
                                                            nt is FF
   27 00000040 01A0A001        MOVEQ            r10, r1
   28 00000044 03A0F000        MOVEQ            pc, #0
   29 00000048         
   30 00000048 E35600FF        CMP              r6, #255    ;;verify r2's expon
                                                            ent is FF
   31 0000004C 01A0A002        MOVEQ            r10, r2
   32 00000050 03A0F000        MOVEQ            pc, #0
   33 00000054         
   34 00000054 E1A07481        MOV              r7, r1, LSL #9 ;mantissa only
   35 00000058 E1A08482        MOV              r8, r2, LSL #9
   36 0000005C E1A074A7        MOV              r7, r7, LSR #9
   37 00000060 E1A084A8        MOV              r8, r8, LSR #9
   38 00000064         
   39 00000064 E490C004        LDR              r12, [r0], #4 ;1.mantissa
   40 00000068 E087700C        ADD              r7, r12
   41 0000006C E088800C        ADD              r8, r12
   42 00000070         
   43 00000070         
   44 00000070 E1550006        CMP              r5, r6      ;exponent differenc
                                                            e
   45 00000074 A0459006        SUBGE            r9, r5, r6
   46 00000078 B0469005        SUBLT            r9, r6, r5
   47 0000007C         
   48 0000007C A1A0B005        MOVGE            r11, r5     ;bigger's exponent
   49 00000080 B1A0B006        MOVLT            r11, r6
   50 00000084         
   51 00000084 A1A08938        MOVGE            r8, r8, LSR r9 ;low exponent's 
                                                            mantissa / 2^r9
   52 00000088 B1A07937        MOVLT            r7, r7, LSR r9
   53 0000008C         



ARM Macro Assembler    Page 2 


   54 0000008C E1530004        CMP              r3, r4      ;add or sub
   55 00000090 1A000000        BNE              SUBNUM
   56 00000094 EA00000E        B                ADDNUM
   57 00000098         
   58 00000098         
   59 00000098         SUBNUM                               ;When sign bits are
                                                            n't same
   60 00000098 E1570008        CMP              r7, r8
   61 0000009C A047A008        SUBGE            r10, r7, r8 ;bigger - smaller
   62 000000A0 B048A007        SUBLT            r10, r8, r7
   63 000000A4         
   64 000000A4         
   65 000000A4 B1A03004        MOVLT            r3, r4      ;bigger mantissa's 
                                                            sign
   66 000000A8         
   67 000000A8 E35A0000        CMP              r10, #0     ;if result is 0
   68 000000AC 01A0AF83        MOVEQ            r10, r3, LSL #31
   69 000000B0 0A000010        BEQ              STORE
   70 000000B4         
   71 000000B4         LOOP
   72 000000B4 E15A000C        CMP              r10, r12    ;while mantissia is
                                                             24 bit
   73 000000B8 B1A0A08A        MOVLT            r10, r10, LSL #1 
                                                            ;mantissia *= 2
   74 000000BC B24BB001        SUBLT            r11, #1     ;exponent--
   75 000000C0 BAFFFFFB        BLT              LOOP
   76 000000C4         
   77 000000C4 E1CAA00C        BIC              r10, r10, r12 ;erease 24th bit
   78 000000C8 E08AAF83        ADD              r10, r3, LSL #31 ;add sign
   79 000000CC E08AAB8B        ADD              r10, r11, LSL #23 ;add exponent
                                                            
   80 000000D0 EA000008        B                STORE
   81 000000D4         
   82 000000D4         
   83 000000D4         ADDNUM                               ;When sign bits are
                                                            n't same
   84 000000D4 E087A008        ADD              r10, r7, r8 ;add mantissa
   85 000000D8         
   86 000000D8 E1A0208C        MOV              r2, r12, LSL #1
   87 000000DC E15A0002        CMP              r10, r2     ;if result mantissa
                                                             is 25-bits
   88 000000E0 A1A0A0AA        MOVGE            r10, r10, LSR #1 ;result /2
   89 000000E4 A28BB001        ADDGE            r11, #1     ;exponent ++
   90 000000E8         
   91 000000E8 E1CAA00C        BIC              r10, r10, r12 ;erease 24th bit
   92 000000EC E08AAF83        ADD              r10, r3, LSL #31 ;add sign
   93 000000F0 E08AAB8B        ADD              r10, r11, LSL #23 ;add exponent
                                                            
   94 000000F4 EAFFFFFF        B                STORE
   95 000000F8         
   96 000000F8         
   97 000000F8         
   98 000000F8         
   99 000000F8         STORE
  100 000000F8 E59FB004        LDR              r11, StoreAddress
  101 000000FC E58BA000        STR              r10, [r11]
  102 00000100         
  103 00000100 E3A0F000        MOV              pc, #0
  104 00000104         



ARM Macro Assembler    Page 3 


  105 00000104         
  106 00000104 40000000 
                       StoreAddress
                               &                &40000000
  107 00000108 14ED2845 
              16DF3245 
              00800000 ReadAddress1
                               DCD              0x14ed2845, 0x16df3245, 0x00800
000
  108 00000114         
  109 00000114                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\assignment_6.d -o.\objects\assignment_6.o -IC:\Keil_v5\ARM\R
V31\INC -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine=
"__UVISION_VERSION SETA 521" --list=.\listings\assignment_6.lst assignment_6.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ADDNUM 000000D4

Symbol: ADDNUM
   Definitions
      At line 83 in file assignment_6.s
   Uses
      At line 56 in file assignment_6.s
Comment: ADDNUM used once
ARMex 00000000

Symbol: ARMex
   Definitions
      At line 1 in file assignment_6.s
   Uses
      None
Comment: ARMex unused
LOOP 000000B4

Symbol: LOOP
   Definitions
      At line 71 in file assignment_6.s
   Uses
      At line 75 in file assignment_6.s
Comment: LOOP used once
ReadAddress1 00000108

Symbol: ReadAddress1
   Definitions
      At line 107 in file assignment_6.s
   Uses
      At line 4 in file assignment_6.s
Comment: ReadAddress1 used once
STORE 000000F8

Symbol: STORE
   Definitions
      At line 99 in file assignment_6.s
   Uses
      At line 17 in file assignment_6.s
      At line 21 in file assignment_6.s
      At line 69 in file assignment_6.s
      At line 80 in file assignment_6.s
      At line 94 in file assignment_6.s

SUBNUM 00000098

Symbol: SUBNUM
   Definitions
      At line 59 in file assignment_6.s
   Uses
      At line 55 in file assignment_6.s
Comment: SUBNUM used once
StoreAddress 00000104

Symbol: StoreAddress
   Definitions
      At line 106 in file assignment_6.s
   Uses
      At line 100 in file assignment_6.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: StoreAddress used once
7 symbols
341 symbols in table
